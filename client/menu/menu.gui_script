local gamelift = require "aws-sdk.gamelift"
local player_id = require "client.util.player_id"
local logger = require "ludobits.m.logger"

local log = logger.create("MENU")

local function show_popup(title, body, action1, action2)
	msg.post(".", "release_input_focus")
	msg.post("/popup", "show", { title = title, body = body, action1 = action1, action2 = action2 })
end

local function hide_popup()
	msg.post(".", "acquire_input_focus")
	msg.post("/popup", "hide")
end

local function sleep(seconds)
	local co = coroutine.running()
	if timer then
		timer.delay(seconds, false, function()
			coroutine.resume(co)
		end)
	else
		local pos = gui
		gui.animate(
			gui.get_node("dummy"),
			gui.PROP_POSITION,
			vmath.vector3(0),
			gui.EASING_LINEAR,
			seconds, 0, function()
				coroutine.resume(co)
			end)
	end
	coroutine.yield()
end


local function create_game_session_and_wait_until_active(args)
	log.d("create_game_session_and_wait_until_active")
	local response, error_message = gamelift.CreateGameSessionSync(gamelift.CreateGameSessionInput(args))
	if error_message or response.GameSession.Status == "ERROR" then
		return nil, error_message or "STATUS: ERROR"
	end
	local game_session = response.GameSession
	local input = gamelift.DescribeGameSessionsInput({ GameSessionId = game_session.GameSessionId })
	while true do
		log.d("create_game_session_and_wait_until_active - waiting until active or error")
		local response, error_message = gamelift.DescribeGameSessionsSync(input)
		if error_message or #response.GameSessions == 0 or response.GameSessions[1].Status == "ERROR" then
			return nil, error_message or "STATUS: ERROR"
		end
		if response.GameSessions[1].Status == "ACTIVE" then
			return game_session
		end
		sleep(5)
	end
end



local function populate_game_session_list(self, GameSessionList)
	while #self.games > 0 do
		local node = table.remove(self.games).nodes[hash("game_session_proto/bg")]
		gui.delete_node(node)
	end

	local pos = gui.get_position(self.game_session_proto)
	local size = gui.get_size(self.game_session_proto)
	for i,GameSession in ipairs(GameSessionList) do
		local status = GameSession.status
		local max = GameSession.MaximumPlayerSessionCount
		local name = GameSession.Name
		local current = GameSession.CurrentPlayerSessionCount

		local nodes = gui.clone_tree(self.game_session_proto)
		gui.set_enabled(nodes[hash("game_session_proto/bg")], true)
		gui.set_enabled(nodes[hash("game_session_proto/join/button")], current < max)
		gui.set_position(nodes[hash("game_session_proto/bg")], pos)
		gui.set_text(nodes[hash("game_session_proto/name")], name)
		gui.set_text(nodes[hash("game_session_proto/players")], ("%d / %d"):format(current, max))
		table.insert(self.games, { nodes = nodes, session = GameSession })
		pos.y = pos.y - (size.y + 10)
	end
end


function init(self)
	--msg.post("@render:", "clear_color", { color = vmath.vector4() })
	msg.post(".", "acquire_input_focus")

	self.player = { id = player_id.get() }

	self.games = {}
	self.game_session_proto = gui.get_node("game_session_proto/bg")
	self.start_game = gui.get_node("start_game/button")
	self.create_game = gui.get_node("create_game/button")
	gui.set_enabled(self.game_session_proto, false)

	coroutine.wrap(function()
		log.d("init - list aliases")
		local response, error_message = gamelift.ListAliasesSync(gamelift.ListAliasesInput({}))
		if error_message then
			return
		end
		self.alias_id = response.Aliases[1].AliasId
		print("AliasId", self.alias_id)
		local input = gamelift.SearchGameSessionsInput({ AliasId = self.alias_id })
		while true do
			local response, error_message = gamelift.SearchGameSessionsSync(input)
			if error_message then
				return
			end
			populate_game_session_list(self, response.GameSessions)
			sleep(5)
		end
	end)()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("close_popup") then
		hide_popup()
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released then
		for _,game in pairs(self.games) do
			if gui.pick_node(game.nodes[hash("game_session_proto/join/button")], action.x, action.y) then
				log.d("joining")
				coroutine.wrap(function()
					show_popup("JOINING", "Joining game. Please wait.", { text = "Cancel", message_id = "cancel_join_game_session" })
					local input = gamelift.CreatePlayerSessionInput({
						PlayerId = self.player.id,
						GameSessionId = game.session.GameSessionId
					})
					local response, error_message = gamelift.CreatePlayerSessionSync(input)
					if error_message then
						show_popup("ERROR", "Unable to join game session", { text = "CLOSE", message_id = "close_popup" })
					else
						log.d("join success")
						local server_ip = response.PlayerSession.IpAddress
						local server_port = response.PlayerSession.Port
						msg.post("controller:/controller", "startgame", {
							ip = server_ip,
							port = server_port,
							player_session_id = response.PlayerSession.PlayerSessionId
						})
					end
				end)()

				return
			end
		end

		if gui.pick_node(self.create_game, action.x, action.y) then
			coroutine.wrap(function()
				show_popup("CREATING GAME", "Creating a new game session. Please wait.", { text = "Cancel", message_id = "cancel_create_game_session" })
				local session, error_message = create_game_session_and_wait_until_active({
					CreatorId = self.player.id,
					AliasId = self.alias_id,
					Name = "My session",
					MaximumPlayerSessionCount = 10
				})
				if error_message then
					show_popup("ERROR", "Unable to create game session", { text = "CLOSE", message_id = "close_popup" })
				else
					show_popup("SUCCESS", "Game session created", { text = "CLOSE", message_id = "close_popup" })
				end
			end)()
		elseif gui.pick_node(self.start_game, action.x, action.y) then
			msg.post("controller:/controller", "startgame", { ip = "127.0.0.1", port = 5000 })
		end
	end
end
